.include "constants.inc"
.include "header.inc"

.segment "CODE"
.proc irq_handler ; запрос прерывания
RTI ; возврат из прерывания
.endproc

.proc nmi_handler ; немаскируемое прерывание
RTI
.endproc

.import reset_handler

.export main
.proc main
    ; данный процесс постоянен при отрисовке любого изображения
    LDX PPUSTATUS ; чтение статуса ППУ
    ; загружаем адрес палитры через адрес $2006, позволяющий ЦП обратиться к ППУ
    LDX #$3f ; первая часть загрузки адреса палитр PPU в память
    STX PPUADDR ; сохраняем старший байт адреса в PPUADDR
    LDX #$00 ; вторая часть загрузки адреса палитр PPU в память ($3f00)
    STX PPUADDR ; сохраняем младший адреса байт в PPUADDR
    ; загружаем цвет в ППУ через 2007 адрес
    LDA #$1c ; загружаем в аккумулятор индекс зелёного цвета
    STA PPUDATA ; сохраняем цвет в PPU
    ; 7 6 5 4 3 2 1 0
    ; 0 0 0 1 1 1 1 0
    ; 0 Режим оттенков серого, 1 отображение левых 8 пикселей,  2 отображение правых 8 пикселей,  3 включён фон
    ; 4 передний план, 5 выделение красного, 6 выделение зелёного, 7 выделение синего
    LDA #%00011110 ; задаём маски для PPUMASK
    STA PPUMASK ; сохраняем данные значения в PPUMASK
  forever:
    JMP forever
.endproc

.segment "VECTORS" ; передача процессору обработчиков прерываний
.addr nmi_handler, reset_handler, irq_handler ; даёт адрес памяти, соответствующий метке
; то есть мы даём записываем в нужные адреса памяти обработчики прерываний

.segment "CHR"
.res 8192